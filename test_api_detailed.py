#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –ë–ì–£–ò–† —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json

API_BASE = "https://iis.bsuir.by/api/v1"

def test_login_variant(username, password, variant_name, data_format):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–Ω —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    url = f"{API_BASE}/auth/login"
    
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 18_5 like Mac OS X) AppleWebKit/605.1.15"
    }
    
    print(f"\nüîê –í–∞—Ä–∏–∞–Ω—Ç {variant_name}: {username}")
    print(f"üì§ URL: {url}")
    print(f"üì§ –î–∞–Ω–Ω—ã–µ: {json.dumps(data_format, indent=2)}")
    
    try:
        response = requests.post(url, json=data_format, headers=headers, timeout=30)
        
        print(f"üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:")
        try:
            response_json = response.json()
            print(json.dumps(response_json, indent=2, ensure_ascii=False))
        except:
            print(response.text)
            
        if response.status_code == 200:
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!")
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def test_markbook(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏"""
    
    url = f"{API_BASE}/markbook"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    print(f"\nüìö –ü–æ–ª—É—á–∞–µ–º –∑–∞—á–µ—Ç–Ω—É—é –∫–Ω–∏–∂–∫—É")
    print(f"üì§ URL: {url}")
    
    try:
        response = requests.get(url, headers=headers, timeout=30)
        
        print(f"üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:")
        try:
            response_json = response.json()
            print(json.dumps(response_json, indent=2, ensure_ascii=False))
        except:
            print(response.text)
            
        return response.json() if response.status_code == 200 else None
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def test_group_info(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
    
    url = f"{API_BASE}/student-group"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    print(f"\nüë• –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ")
    print(f"üì§ URL: {url}")
    
    try:
        response = requests.get(url, headers=headers, timeout=30)
        
        print(f"üì• –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:")
        try:
            response_json = response.json()
            print(json.dumps(response_json, indent=2, ensure_ascii=False))
        except:
            print(response.text)
            
        return response.json() if response.status_code == 200 else None
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

if __name__ == "__main__":
    print("üöÄ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ë–ì–£–ò–†")
    print("="*60)
    
    username = "42850012"
    password = "Bsuirinyouv.12_"
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    variants = [
        ("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", {
            "username": username,
            "password": password,
            "rememberMe": True
        }),
        ("–õ–æ–≥–∏–Ω –∫–∞–∫ login", {
            "login": username,
            "password": password,
            "rememberMe": True
        }),
        ("–õ–æ–≥–∏–Ω –∫–∞–∫ studentId", {
            "studentId": username,
            "password": password,
            "rememberMe": True
        }),
        ("–õ–æ–≥–∏–Ω –∫–∞–∫ recordBookNumber", {
            "recordBookNumber": username,
            "password": password,
            "rememberMe": True
        }),
        ("–ë–µ–∑ rememberMe", {
            "username": username,
            "password": password
        }),
        ("–° email —Ñ–æ—Ä–º–∞—Ç–æ–º", {
            "email": username,
            "password": password
        })
    ]
    
    successful_login = None
    
    for variant_name, data_format in variants:
        result = test_login_variant(username, password, variant_name, data_format)
        if result and "access_token" in result:
            successful_login = result
            print(f"\nüéâ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç: {variant_name}")
            break
        print("-" * 40)
    
    if successful_login:
        token = successful_login["access_token"]
        print(f"\nüéüÔ∏è –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: {token[:20]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        print("\n" + "="*60)
        print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS")
        print("="*60)
        
        # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüë§ –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        try:
            response = requests.get(f"{API_BASE}/personal-information", 
                                  headers={"Authorization": f"Bearer {token}"}, 
                                  timeout=30)
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        
        # –ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞
        test_markbook(token)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
        test_group_info(token)
        
    else:
        print("\nüíî –ù–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ª–æ–≥–∏–Ω–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
        print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("  - –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("  - –ò–∑–º–µ–Ω–∏–ª—Å—è —Ñ–æ—Ä–º–∞—Ç API")
        print("  - –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")