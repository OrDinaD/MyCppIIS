name: 🍎 iOS Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  XCODE_VERSION: '16.0'
  IOS_DESTINATION: 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.1'

jobs:
  build-and-test:
    name: 🔨 Build & Test iOS App
    runs-on: macos-15
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🛠️ Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: 🔍 Verify Xcode Installation
      run: |
        xcodebuild -version
        xcrun simctl list devices
        
    - name: 📱 List Available Simulators
      run: xcrun simctl list devices available
      
    - name: 🧹 Clean Build Directory
      run: |
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        xcodebuild clean -project cPPiIS.xcodeproj
        
    - name: 🔨 Build iOS App
      run: |
        xcodebuild build \
          -project cPPiIS.xcodeproj \
          -scheme cPPiIS \
          -destination "${{ env.IOS_DESTINATION }}" \
          -configuration Debug \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: 🧪 Run Unit Tests (if any)
      run: |
        xcodebuild test \
          -project cPPiIS.xcodeproj \
          -scheme cPPiIS \
          -destination "${{ env.IOS_DESTINATION }}" \
          -configuration Debug \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
      continue-on-error: true
      
    - name: 📊 Analyze Code
      run: |
        xcodebuild analyze \
          -project cPPiIS.xcodeproj \
          -scheme cPPiIS \
          -destination "${{ env.IOS_DESTINATION }}" \
          -configuration Debug \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO

  cpp-analysis:
    name: 🔍 C++ Code Analysis
    runs-on: macos-15
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🛠️ Setup Clang Tools
      run: |
        brew install llvm
        echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
        
    - name: 🔍 C++ Static Analysis
      run: |
        find cPPiIS/Core -name "*.cpp" -o -name "*.hpp" | xargs clang-tidy --checks="-*,readability-*,performance-*,modernize-*" || true
        
    - name: 🧹 C++ Format Check
      run: |
        find cPPiIS/Core -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run --Werror || true

  api-testing:
    name: 🌐 API Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: 🧪 Run API Tests
      run: |
        python test_api.py || echo "API tests completed"
        python test_api_detailed.py || echo "Detailed API tests completed"
      continue-on-error: true

  documentation:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Check Documentation
      run: |
        # Проверяем наличие основных файлов документации
        test -f README.md || { echo "❌ README.md missing"; exit 1; }
        test -f .github/CONTRIBUTING.md || { echo "❌ CONTRIBUTING.md missing"; exit 1; }
        test -f .github/CODE_OF_CONDUCT.md || { echo "❌ CODE_OF_CONDUCT.md missing"; exit 1; }
        
        # Проверяем базовое содержимое README
        grep -q "cPPiIS" README.md || { echo "❌ Project name not found in README"; exit 1; }
        grep -q "ООП" README.md || { echo "❌ OOP reference not found in README"; exit 1; }
        
        echo "✅ Documentation check passed"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Scan for Secrets
      run: |
        # Проверяем на наличие потенциально чувствительных данных
        if grep -r -i "password\s*=" cPPiIS/ --exclude-dir=.git --exclude="*.md" | grep -v "//.*password" | grep -v "/\*.*password.*\*/" ; then
          echo "⚠️ Warning: Found potential hardcoded passwords"
        fi
        
        if grep -r -i "api_key\s*=" cPPiIS/ --exclude-dir=.git --exclude="*.md"; then
          echo "⚠️ Warning: Found potential hardcoded API keys"
        fi
        
        echo "✅ Security scan completed"

  build-summary:
    name: 📋 Build Summary
    needs: [build-and-test, cpp-analysis, api-testing, documentation, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 Summary Report
      run: |
        echo "## 🍎 iOS Build & Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| iOS Build & Test | ${{ needs.build-and-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| C++ Analysis | ${{ needs.cpp-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| API Testing | ${{ needs.api-testing.result == 'success' && '✅ Passed' || '⚠️ Completed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.documentation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎓 Educational Project Status" >> $GITHUB_STEP_SUMMARY
        echo "This is a coursework project demonstrating OOP principles in C++." >> $GITHUB_STEP_SUMMARY